import { Abstract } from "./Abstract";
import { TeamSpeak } from "../TeamSpeak";
import { ServerList } from "../types/ResponseTypes";
export declare class TeamSpeakServer extends Abstract {
    constructor(parent: TeamSpeak, list: ServerList);
    get id(): number;
    get port(): number;
    get status(): string;
    get clientsonline(): number;
    get queryclientsonline(): number;
    get maxclients(): number;
    get uptime(): number;
    get name(): string;
    get autostart(): number;
    get machineId(): string;
    get uniqueIdentifier(): string | undefined;
    /**
     * selects a virtual server
     * @param client_nickname sets the nickname when selecting a server
     */
    use(client_nickname?: string): Promise<import("../types/QueryResponse").QueryResponseTypes[]>;
    /** deletes the server */
    del(): Promise<import("../types/QueryResponse").QueryResponseTypes[]>;
    /**
     * Starts the virtual server.
     * Depending on your permissions, you're able to start either your own virtual server only or all virtual servers in the server instance.
     */
    start(): Promise<import("../types/QueryResponse").QueryResponseTypes[]>;
    /**
     * Stops the virtual server.
     * Depending on your permissions, you're able to stop either your own virtual server only or all virtual servers in the server instance.
     * @param msg specifies a text message that is sent to the clients before the client disconnects (requires TeamSpeak Server 3.2.0 or newer).
     */
    stop(msg?: string): Promise<import("../types/QueryResponse").QueryResponseTypes[]>;
}
